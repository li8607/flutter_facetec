import Flutter
import UIKit
import FaceTecSDK

public class FlutterFacetecPlugin: NSObject, FlutterPlugin, URLSessionDelegate  {
    
    
  var latestSessionResult: FaceTecSessionResult!
  var latestProcessor: Processor!
    
  public static func register(with registrar: FlutterPluginRegistrar) {
    let channel = FlutterMethodChannel(name: "flutter_facetec", binaryMessenger: registrar.messenger())
    let instance = FlutterFacetecPlugin()
    registrar.addMethodCallDelegate(instance, channel: channel)
  }

  public func handle(_ call: FlutterMethodCall, result: @escaping FlutterResult) {
    switch call.method {
    case "getPlatformVersion":
      result("iOS " + UIDevice.current.systemVersion)
    case "initialize":
//        guard let args = call.arguments as? Dictionary<String, Any>,
//              let deviceKeyIdentifier = args["deviceKeyIdentifier"] as? String,
//              let faceScanEncryptionKey = args["publicFaceScanEncryptionKey"] as? String
//        else {
//            return result(FlutterError())
//            }
//        return initialize(deviceKeyIdentifier: deviceKeyIdentifier, publicFaceScanEncryptionKey: faceScanEncryptionKey, result: result);
        initialize()
    case "startLiveness":
        startLiveCheckProcess();
        
//        return startLiveness(result: result);
    default:
      result(FlutterMethodNotImplemented)
    }
  }
    
    private func initialize() {
        // Initialize FaceTec SDK
        Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
            if(initializationSuccessful) {
                print("Initialized FaceTecSDK")
            } else {
                // Displays the FaceTec SDK Status to text field if init failed
                print("\(FaceTec.sdk.description(for: FaceTec.sdk.getStatus()))")
            }
        })
    }
    
//    private func initialize(deviceKeyIdentifier: String, publicFaceScanEncryptionKey: String, result: @escaping FlutterResult) {
//
//        var ftCustomization = FaceTecCustomization()
////        ftCustomization.overlayCustomization.brandingImage = UIImage(named: "flutter_logo")
//        FaceTec.sdk.setCustomization(ftCustomization)
//
//        FaceTec.sdk.initializeInDevelopmentMode(deviceKeyIdentifier: deviceKeyIdentifier, faceScanEncryptionKey: publicFaceScanEncryptionKey, completion: { initializationSuccessful in
//            if (initializationSuccessful) {
//                result(true)
//            }
//            else {
//                let statusStr = FaceTec.sdk.description(for: FaceTec.sdk.getStatus())
//                result(FlutterError(code: "InitError", message: statusStr, details: nil))
//            }
//        })
//    }
    
//    private func startLiveness(result: @escaping FlutterResult) {
//         let livenessCheckViewController = FaceTec.sdk.createSessionVC(faceScanProcessorDelegate: self)
//         let controller: FlutterViewController = window?.rootViewController as! FlutterViewController;
//         controller.present(livenessCheckViewController, animated: true, completion: nil)
//     }
    
//    // FaceTecFaceScanProcessorDelegate method
//    public func processSessionWhileFaceTecSDKWaits(sessionResult: FaceTecSessionResult, faceScanResultCallback: FaceTecFaceScanResultCallback) {
//         fatalError("FaceTecSDK: This needs to be implemented")
//     }
//
//     // FaceTecFaceScanProcessorDelegate method
//    public func onFaceTecSDKCompletelyDone() {
//         fatalError("FaceTecSDK: This needs to be implemented")
//     }
    
    private func startLiveCheckProcess() {
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.
        if let rootViewController = UIApplication.shared.delegate?.window??.rootViewController {
            getSessionToken() { sessionToken in
                self.latestProcessor = LivenessCheckProcessor(sessionToken: sessionToken, fromViewController: rootViewController)
            }
        } else {
            print("view not found")
        }
    }
    
    func getSessionToken(sessionTokenCallback: @escaping (String) -> ()) {
        
        let endpoint = Config.BaseURL + "/session-token"
        let request = NSMutableURLRequest(url: NSURL(string: endpoint)! as URL)
        request.httpMethod = "GET"
        // Required parameters to interact with the FaceTec Managed Testing API.
        request.addValue(Config.DeviceKeyIdentifier, forHTTPHeaderField: "X-Device-Key")
        request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "User-Agent")
        request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "X-User-Agent")

        let session = URLSession(configuration: URLSessionConfiguration.default, delegate: self, delegateQueue: OperationQueue.main)
        let task = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            // Ensure the data object is not nil otherwise callback with empty dictionary.
            guard let data = data else {
                print("Exception raised while attempting HTTPS call 1.")
                return
            }
            if let responseJSONObj = try? JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as! [String: AnyObject] {
                if((responseJSONObj["sessionToken"] as? String) != nil) {
                    sessionTokenCallback(responseJSONObj["sessionToken"] as! String)
                    return
                } else {
                    print("Exception raised while attempting HTTPS call 2. \(responseJSONObj)")
                }
            }
        })
        task.resume()
    }
}
